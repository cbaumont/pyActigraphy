{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7bbdfd91",
   "metadata": {},
   "source": [
    "# Manipulating light exposure data with pyActigraphy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f41f1ee4",
   "metadata": {},
   "source": [
    "![Light manipulation](img/ryunosuke-kikuno-nJJo1vD9Xug-unsplash.jpg)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf1bf382",
   "metadata": {},
   "source": [
    "Photo by <a href=\"https://unsplash.com/@ryunosuke_kikuno?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Ryunosuke Kikuno</a> on <a href=\"https://unsplash.com/s/photos/light-bulb-repair?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b93a3b39",
   "metadata": {},
   "source": [
    "## Disclaimer\n",
    "\n",
    "The development of the pyActigraphy module for analysing light exposure data was led and financially supported by members of the Daylight Academy Project *The role of daylight for humans* (led by Mirjam MÃ¼nch, Manuel Spitschan). The module is part of the Human Light Exposure Database. For more information about the project, please see\n",
    "https://daylight.academy/projects/state-of-light-in-humans/."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3fa28c0d",
   "metadata": {},
   "source": [
    "## Introduction\n",
    "\n",
    "Just like any recording, light exposure data recordings often require some preprocessing before analysis. These steps may include cleaning, resampling, filtering, etc...\n",
    "\n",
    "The light exposure data analysis module of *pyActigraphy* allows users to perform many of steps easily. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3655e335",
   "metadata": {},
   "source": [
    "This tutorial presents how to:\n",
    "\n",
    "* truncate or mask spurious light exposure periods;\n",
    "* resample, binarize or filter light exposure data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3df2d7c",
   "metadata": {},
   "source": [
    "## Imports and input data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b859811c",
   "metadata": {},
   "source": [
    "As usual, let's import the necessary packages:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3fad6601",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "import pyActigraphy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "88c0da16",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "108403fe",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "import plotly.graph_objects as go"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c1271d51",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "import os"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "731426bf",
   "metadata": {},
   "source": [
    "Similarly to the [introduction tutorial](https://ghammad.github.io/pyActigraphy/pyLight-Intro.html), we will use as input data a sample file recorded by a ActTrust device (Condor Instrument), located in the test directory of the pyActigraphy package itself."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b8ba428",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "fpath = os.path.join(\n",
    "    os.path.dirname(pyActigraphy.__file__),\n",
    "    'tests','data/',\n",
    "    'test_sample_atr.txt'\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5c4f87df",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "raw = pyActigraphy.io.read_raw_atr(fpath)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b067d5e4",
   "metadata": {},
   "source": [
    "## Truncation and data masking\n",
    "\n",
    "The period of recording often exceeds the period during which the light recording device was actually worn by the participant; the recording might have started before giving the device to the participant or the device was removed after a certain amount of days by the participant while still recording. Or, you might simply want to analysis a fixed number of days for all your participants.\n",
    "Additionaly, the device might also have been removed temporarily by the participant.\n",
    "\n",
    "In any case, it is mandatory to truncate and/or mask these periods in the recording prior to analysis."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19e42410",
   "metadata": {},
   "source": [
    "Let's first inspect our recording:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5fdde77c",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "raw.light.data.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3d6fe08c",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "raw.light.data.tail(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6bde990",
   "metadata": {},
   "source": [
    "The recording starts at 9:00 on the fictional date of the 1st of January 1918 and ends exactly 4 days later."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "318bc205",
   "metadata": {},
   "source": [
    "### Truncation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "363ea779",
   "metadata": {},
   "source": [
    "To truncate the recording, there are two ways:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8afac66",
   "metadata": {},
   "source": [
    "1. Specify a start and stop datetime on the light data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1eed28df",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "raw.light.start_time = '1918-01-02 09:00:00'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "42529618",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "raw.light.stop_time = '1918-01-04 09:00:00'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "444e1631",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "raw.light.data.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f9d8b086",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "raw.light.data.tail(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e0fe67d",
   "metadata": {},
   "source": [
    "2. Specify a start and stop datetime when reading the input recording:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a3109bc6",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "raw_trunc = pyActigraphy.io.read_raw_atr(\n",
    "    fpath,\n",
    "    start_time = '1918-01-02 09:00:00',\n",
    "    period='2D' # restrict input data to 2 days\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2514d6a",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "raw_trunc.light.data.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2a23797a",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "raw_trunc.light.data.tail(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d34467cd",
   "metadata": {},
   "source": [
    "Both methods are equivalent."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8259e2c8",
   "metadata": {},
   "source": [
    "It is possible to reset these start and stop times at any moment:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a3d8f3e3",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "raw.light.reset_times()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44a463ad",
   "metadata": {},
   "source": [
    "The start and stop times have been set to `None`: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "12c2d784",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "raw.light.start_time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61dba28d",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "raw.light.stop_time"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14513777",
   "metadata": {},
   "source": [
    "### Masking"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4573053",
   "metadata": {},
   "source": [
    "The 'machinery' to mask some periods of light data acquisition in the recording is similar to the one used for activity; it consists in dynamically masking the light data upon access. The underlying original data are kept intact and the mask can easily be turned off and on.\n",
    "\n",
    "For more info, please see this [tutorial](https://ghammad.github.io/pyActigraphy/pyActigraphy-Masking.html)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9760820",
   "metadata": {},
   "source": [
    "Let's first visualize the white light channel ('LIGHT') as well as the activity:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a1053f2",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "layout = go.Layout(\n",
    "    xaxis=dict(title=\"Date time\"),\n",
    "    yaxis=dict(title=\"Activity counts/period\"),\n",
    "    yaxis2=dict(title='Light intensity',overlaying='y',side='right'),\n",
    "    showlegend=True\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "95afc487",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "fig1 = go.Figure([\n",
    "    go.Scatter(\n",
    "        x=raw_trunc.data.index.astype(str),\n",
    "        y=raw_trunc.data,\n",
    "        name='Activity'),\n",
    "    go.Scatter(\n",
    "        x=raw_trunc.light.get_channel('LIGHT').index.astype(str),\n",
    "        y=raw_trunc.light.get_channel('LIGHT'),\n",
    "        yaxis='y2', opacity=0.5,\n",
    "        name='Light')\n",
    "], layout=layout)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "656ffa0e",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "fig1.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c683b6d",
   "metadata": {},
   "source": [
    "First, create a simple mask (i.e a series of 1, meant for being further edited by the users):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a5b6722c",
   "metadata": {},
   "outputs": [],
   "source": [
    "raw.light.create_light_mask()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b62dde4",
   "metadata": {},
   "source": [
    "To simply mask a period of light data acquistion on all channels:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2cd14011",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "raw.light.add_light_mask_period(\n",
    "    start='1918-01-03 06:00:00',\n",
    "    stop='1918-01-03 10:00:00'\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2c5388b",
   "metadata": {},
   "source": [
    "However, it is possible apply such mask period on a specific channel:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "255f8e2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "raw.light.get_channel_list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6a8e3867",
   "metadata": {},
   "outputs": [],
   "source": [
    "raw.light.add_light_mask_period(\n",
    "    start='1918-01-03 05:00:00',\n",
    "    stop='1918-01-03 11:00:00',\n",
    "    channel='RED LIGHT'\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73ee29d0",
   "metadata": {},
   "source": [
    "However, as long as the `apply_mask` boolean is not set to True, the data are not actually masked:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b1a746aa",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "raw.light.apply_mask"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8081db27",
   "metadata": {
    "cell_style": "split",
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "raw.light.get_channel(\n",
    "    'LIGHT'\n",
    ")['1918-01-03 05:58:00':'1918-01-03 10:02:00']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "94993ecf",
   "metadata": {
    "cell_style": "split"
   },
   "outputs": [],
   "source": [
    "raw.light.get_channel(\n",
    "    'RED LIGHT'\n",
    ")['1918-01-03 04:58:00':'1918-01-03 11:02:00']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7e4348c2",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "raw.light.apply_mask = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a7b031bb",
   "metadata": {
    "cell_style": "split",
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "raw.light.get_channel(\n",
    "    'LIGHT'\n",
    ")['1918-01-03 05:58:00':'1918-01-03 10:02:00']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5fe8d9fb",
   "metadata": {
    "cell_style": "split"
   },
   "outputs": [],
   "source": [
    "raw.light.get_channel(\n",
    "    'RED LIGHT'\n",
    ")['1918-01-03 04:58:00':'1918-01-03 11:02:00']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8ba14f8",
   "metadata": {},
   "source": [
    "The masked data have been replaced with NaN, *on the fly*."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a862c08a",
   "metadata": {},
   "source": [
    "To visualize this, let's superimpose the light exposure data and the mask:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c403d65c",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "layout = go.Layout(\n",
    "    xaxis=dict(title=\"Date time\"),\n",
    "    yaxis=dict(title=\"Activity counts/period\"),\n",
    "    yaxis2=dict(title='Mask',overlaying='y',side='right'),\n",
    "    showlegend=True\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0b7a3c92",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "fig2 = go.Figure([\n",
    "    go.Scatter(\n",
    "        x=raw.light.get_channel('LIGHT').index.astype(str),\n",
    "        y=raw.light.get_channel('LIGHT'),\n",
    "        name='Light'),\n",
    "    go.Scatter(\n",
    "        x=raw.light.mask.index.astype(str),\n",
    "        y=raw.light.mask,\n",
    "        yaxis='y2', opacity=0.5,\n",
    "        name='Mask')\n",
    "], layout=layout)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9d33a6cc",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "fig2.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17b353e5",
   "metadata": {},
   "source": [
    "## Data resampling & binarization\n",
    "\n",
    "In order to analyse the light exposure data, it is sometimes more convenient to work with data resampled at a lower frequency than thr acquisition frequency. It could be also useful to binarize the light exposure data; light data are replaced with '1' if they are above a certain threshold and with '0' otherwise.\n",
    "\n",
    "Both functionalities are readily available within the light expsoure data analysis module of *pyActigraphy*."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd38f041",
   "metadata": {},
   "source": [
    "### Resampling"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7a206de",
   "metadata": {},
   "source": [
    "To resample the light data to a 5-min period:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bbf9145c",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "help(raw.light.resampled_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "debd3756",
   "metadata": {},
   "source": [
    "It is possible to specify the aggregation function used during the resampling. By default, the data are summed over each resampled periods. However, it is possible to use a 'mean':"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61ba8ef4",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "raw.light.resampled_data(rsfreq='5min', agg='mean').head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81f19a7b",
   "metadata": {},
   "source": [
    "The resulting time series has now an index with an epoch length of 5 min."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8927b7af",
   "metadata": {},
   "source": [
    "### Binarization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4dd3eda0",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "help(raw.light.binarized_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "466de08c",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "raw.light.data.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b349636",
   "metadata": {},
   "source": [
    "To binarize data with a specific threshold:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "558af306",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "raw.light.binarized_data(threshold=2.5).head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d0babe8",
   "metadata": {},
   "source": [
    "As expected, light data timepoints with a value below 2.5 are set to '0' and to '1' otherwise."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff4d03e1",
   "metadata": {},
   "source": [
    "### Resampling and binarization at the same time"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8a646a9",
   "metadata": {},
   "source": [
    "With the binarization function, it is also possible to first resample the light exposure data before binarization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aba7708b",
   "metadata": {},
   "source": [
    "To resample to a 5-min period and then binarize the data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b95d4f37",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "raw.light.binarized_data(\n",
    "    threshold=2.5,\n",
    "    rsfreq='5min',\n",
    "    agg='mean'\n",
    ").head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee801b9b",
   "metadata": {},
   "source": [
    "## Data filtering\n",
    "\n",
    "Instead of resampling the data, it is possible to retain the original sampling frequency while getting rid of the high frequency fluctuations  by simply filtering the data.\n",
    "\n",
    "The light exposure data analysis module of *pyActigraphy* provides an easy way to instaciate and apply a Butterworth filter on the light data. This is essentially a wrapper around the Scipy's [scipy.signal.butter](https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.butter.html) function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "848aa04a",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "raw.light.apply_mask = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b284f3a",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "help(raw.light.filter_butterworth)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04d67d5f",
   "metadata": {},
   "source": [
    "To filter the light exposure data with a 4th order low-pass Butterworth filter with a frequency cut a 100th of the original sampling frequency:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b6a362cf",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "wlight_filtered = raw.light.filter_butterworth(\n",
    "    fc_low=None,\n",
    "    fc_high=(1/30)/100,\n",
    "    N=4,\n",
    "    channels=['LIGHT']\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0845b3b9",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "fig3 = go.Figure(\n",
    "    data=[\n",
    "        go.Scatter(\n",
    "            x=raw.light.get_channel('LIGHT').index.astype(str),\n",
    "            y=raw.light.get_channel('LIGHT'),name='Raw light data'),\n",
    "        go.Scatter(\n",
    "            x=wlight_filtered.index.astype(str),\n",
    "            y=wlight_filtered.loc[:,'LIGHT'],\n",
    "            name='Filtered data'\n",
    "        ),\n",
    "    ]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a022a057",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "fig3.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba7f7059",
   "metadata": {},
   "source": [
    "Et voilÃ ! For now..."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "pyActi37",
   "language": "python",
   "name": "pyacti37"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
